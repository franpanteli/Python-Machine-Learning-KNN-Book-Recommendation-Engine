This txt file contains my notes on the project description, found at https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/book-recommendation-engine-using-knn

Project Environment and Submission:
	-> The project is in an ipynb file in the Google Colaboratory environment 
	-> They want you to submit a link to the notebook after it passes their tests
		-> You can share them a link to the Google Colaboratory ipynb <- anybody with the link needs to be able to see it 
	-> When you are done, you upload the link to your solution ether in GitHub or a Google Colaboratory link - to the page which these notes were made on

Project Challenge: 
	-> It's a book recommendation algorithm 
	-> The K-Nearest Neighbours algorithm 
	-> Dataset:
		-> We are recommending books 
		-> The dataset is of book reviews -> It's called the Book-Crossings dataset 
		-> So we have a library of different book reviews which we train the model on 
		-> We can use NLP / sentiment analysis to figure out whether those reviews are good or bad -> And we can score them on how tripe they are
		-> Then based off of a book whose name in the dataset which we are given, we can run a sentiment analysis on it and select it's nearest neighbours as the book which the recommendation engine would suggest
		-> In the examples in the course material, sentiment analysis was used on movie reviews 
		-> The book dataset we are using contains book reviews 
	-> We import and process the data
		-> The data needs cleaning 
		-> But some parts of this are also done in the template code 

	We use the data to train the model:
		-> We are using the K-Means algorithm from sklearn 
		-> The module which the previous project in the course used was a convolutional neural network, with gradient descent using the Adam algorithm <- That was done using the Keras module 
		-> This is using the sklearn module to perform K nearest neighbours on book reviews 
		-> The importance of using the right algorithm for the given context 

	Predictions we want the model to make: 
		-> We want to input a given book into the model 
		-> And then for the model to return the books which are similar to it 
		-> We are using K means to cluster the books which are the most similar -> And we are using the reviews to train it with this 
		-> So if we give it the name of some book, it should be able to output the names of the books in the clusters which are the most similar to it 
		-> And output those to us in a network which tells us how similar that book is to the rest of them 

	-> We import and clean the data
	-> That data is for the reviews of different books
	-> Then we train the model using K-Means (unsupervised), which clusters different similar books together
	-> So when we are using the model to make predictions, we can hand it the name of a book and predict the others which are the most similar to it in the cluster
	-> We are using K-Means with sklearn -> So that it learns the different clusters of books 
	-> We can also tell it the number of books per cluster which we want 
	-> Presuming that when we give it the name of a book, it will return the ones which are the most similar to it in the cluster which it's in -> The number of books in the cluster will be the same as the number of recommendations it makes (-1 book because we are assuming that the book we input into it for the prediction will be counted as part of that cluster being used to make recommendations)

	K-Means <- The algorithm we are using with sklearn:
		-> This is the algorithm which we are using to train the data 
		-> It's unsupervised -> The model is figuring out the clusters of book which are the most similar to each other - based off of the reviews being used to train it 
		-> It's forming clusters of the most similar books -> By measuring the distances from each of the books to the centroids in the model <- These distances are called the "closeness" of that book (point in the model / graph) 
		-> This is an example of NLP / sentiment analysis 

	The function which performs this <- We are making this function:
		-> Our function is called get_recommends 
		-> This is the function which we are using to make recommendations 
		-> The argument to our function is the name of a book in the dataset 
		-> It returns a list of 5 books which are in its cluster (the most similar books to it according to K-Means)
		-> So it's in a cluster of 6 books 
		-> We don't just want the names of the other 5 books which are in its cluster, we want to calculate the distance between them and return it 
			-> In that function we are calculating the distance between that books and the 5 books in its cluster (because to calculate all of the distances for the millions of books in the entire dataset would be ineffective)
		-> Syntax for the output of the function we are creating 
			-> This should be in a specific form 
			-> It needs to past the test cell which they are giving us in Python
			-> The function should return an array of arrays -> Each array it contains is in the syntax of [the name of a book, the distance from the book which is the argument of the function to the book in this return array] 
			-> That is one element of the return array -> And in that return array there are 5 of those, listed in the order from furthest to the input book to the closest to the input book 
			-> It's that and then there is another book which is listed before that array of 1x2 arrays, which is the name of the book which was input into the model 
			-> The exact syntax of this output which we want from our function is in the test code below 

	Test Code:
		-> We are making the get_recommends function which makes the predictions 
		-> The input `get_recommends("The Queen of the Damned (Vampire Chronicles (Paperback))")` to this function should return: 
`
[
  'The Queen of the Damned (Vampire Chronicles (Paperback))',
  [
    ['Catch 22', 0.793983519077301], 
    ['The Witching Hour (Lives of the Mayfair Witches)', 0.7448656558990479], 
    ['Interview with the Vampire', 0.7345068454742432],
    ['The Tale of the Body Thief (Vampire Chronicles (Paperback))', 0.5376338362693787],
    ['The Vampire Lestat (Vampire Chronicles, Book II)', 0.5178412199020386]
  ]
]
`
		-> The last cell has this test code 

	You can graph the function (optional):
		-> Some of the books don't have enough ratings to be statistically significant enough 
		-> There can be issues with the data we train the model on